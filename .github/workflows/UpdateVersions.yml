name: Auto Version Bump by Project

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  bump-versions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Parse commit message
        id: parse
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit: $COMMIT_MSG"

          # Match: [Project[,Project2,...]] bumpType:
          if [[ "$COMMIT_MSG" =~ ^\[([A-Za-z0-9_, ]+)\][[:space:]]*([a-zA-Z]+): ]]; then
            RAW_SCOPE="${BASH_REMATCH[1]}"
            BUMP_TYPE="${BASH_REMATCH[2],,}"  # Lowercase

            # Validate bump type
            if [[ "$BUMP_TYPE" != "major" && "$BUMP_TYPE" != "minor" && "$BUMP_TYPE" != "patch" ]]; then
              echo "‚ö†Ô∏è Invalid bump type: '$BUMP_TYPE'. Skipping version bump."
              echo "projects=" >> $GITHUB_OUTPUT
              echo "bump_type=none" >> $GITHUB_OUTPUT
              exit 0
            fi

            PROJECTS=$(echo "$RAW_SCOPE" | tr -d ' ' | tr ',' ' ')
            echo "projects=$PROJECTS" >> $GITHUB_OUTPUT
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Commit message does not match expected format. Skipping version bump."
            echo "projects=" >> $GITHUB_OUTPUT
            echo "bump_type=none" >> $GITHUB_OUTPUT
          fi

      - name: Bump version.json for each project
        if: steps.parse.outputs.bump_type != 'none'
        shell: bash
        env:
          BUMP_TYPE: ${{ steps.parse.outputs.bump_type }}
        run: |
          for PROJECT in ${{ steps.parse.outputs.projects }}; do
            VERSION_FILE="$PROJECT/version.json"
            echo "üì¶ Bumping $PROJECT (${{ steps.parse.outputs.bump_type }})"

            if [ ! -f "$VERSION_FILE" ]; then
              echo "Creating new version file for $PROJECT"
              echo '{"version": "0.0.0"}' > "$VERSION_FILE"
            fi

            VERSION=$(jq -r .version "$VERSION_FILE")
            echo "Version: $VERSION"
            MAJOR=$(echo "$VERSION" | cut -d. -f1)
            MINOR=$(echo "$VERSION" | cut -d. -f2)
            PATCH=$(echo "$VERSION" | cut -d. -f3)
            echo "MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

            BUMP_TYPE=$(echo "$BUMP_TYPE" | xargs)
            case "$BUMP_TYPE" in
              "major")
                echo "üõ† Bumping major version"
                ((MAJOR++)); MINOR=0; PATCH=0 ;;
              "minor")
                echo "üõ† Bumping minor version"
                ((MINOR++)); PATCH=0 ;;
              "patch")
                echo "üõ† Bumping patch version"
                ((PATCH++)) ;;
              *)
                echo "‚ùå Unknown bump type: '$BUMP_TYPE'"
                exit 1 ;;
            esac

            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "üõ† Writing new version to $VERSION_FILE"
            # Debug: Check if the file exists
            if [ ! -f "$VERSION_FILE" ]; then
              echo "‚ùå $VERSION_FILE does not exist"
              exit 1
            fi
            
            # Debug: Check contents of $VERSION_FILE before modification
            echo "üìÑ Current contents of $VERSION_FILE:"
            cat "$VERSION_FILE"
            
            # Attempt to write new version with jq
            jq --arg v "$NEW_VERSION" '.version = $v' "$VERSION_FILE" > tmp.json
            
            # Check for jq failure
            if [ $? -ne 0 ]; then
              echo "‚ùå jq failed to process $VERSION_FILE"
              cat "$VERSION_FILE"
              exit 1
            fi
            
            # Debug: Check the generated tmp.json before moving
            echo "üìÑ Contents of tmp.json after jq operation:"
            cat tmp.json
            
            # Move tmp.json to the original file
            mv tmp.json "$VERSION_FILE"
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Successfully updated $VERSION_FILE to $NEW_VERSION"
            else
              echo "‚ùå Failed to move tmp.json to $VERSION_FILE"
              exit 1
            fi

            echo "‚úÖ $PROJECT bumped to $NEW_VERSION"
          done

      - name: Commit and push version changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git add */version.json

          if git diff --cached --quiet; then
            echo "No version changes to commit."
          else
            git commit -m "ci: bump version(s)"
            git push
          fi
